?round
10^ceiling(log10(t))
10^ceiling(log10(123))
10*round(t/10)
t
t=123
10*round(t/10)
10*ceiling(t/10)
t=7
sprintf("%03d", 10*ceiling(t/10))
t=123
sprintf("%03d", 10*ceiling(t/10))
t=0
current_node=Source
print(paste0("at T=",t," --- at node=",current_node))
print(paste0("at T=",t," --- at node=",current_node))
ttt <- sprintf("%03d", 10*ceiling(t/10))
tmp.ig <- G[[ttt]]
ttt
tmp.sp <- shortest_paths(tmp.ig, from = current_node, to = Dist)
tmp.sp
tmp.path <- attributes(sp0$vpath[[1]])$names
tmp.path
tmp.path[0]
tmp.path[1]
tmp.path
tmp.path[5]
tmp.path[5] <- "J"
tmp.path[5]
tmp.path
class(tmp.path)
PATH <- as.character()
PATH
PATH[1] <- "A"
PATH
PATH <- as.character()
PATH[1] <- Source
current_node=Source
t=0
i=2
print(paste0("at T=",t," --- at node=",current_node))
ttt <- sprintf("%03d", 10*ceiling(t/10))
tmp.ig <- G[[ttt]]
tmp.sp <- shortest_paths(tmp.ig, from = current_node, to = Dist)
tmp.path <- attributes(sp0$vpath[[1]])$names
tmp.path
distances(tmp.ig, from=current_node, to=tmp.path[2])
current_node
distances(tmp.ig, from="A", to="E")
distances(ig0,v="A",to="E")
aa <- distances(ig0,v="A",to="E")
class(aa)
distances(tmp.ig, v=current_node, to=tmp.path[2])
as.numeric(distances(tmp.ig, v=current_node, to=tmp.path[2]))
PATH <- as.character()
PATH[1] <- Source
current_node=Source
t=0
i=1
while (current_node != Dist) {
print(paste0("at T=",t," --- at node=",current_node))
ttt <- sprintf("%03d", 10*ceiling(t/10))
tmp.ig <- G[[ttt]]
tmp.sp <- shortest_paths(tmp.ig, from = current_node, to = Dist)
tmp.path <- attributes(sp0$vpath[[1]])$names
current_node <- tmp.path[2]
t = t + as.numeric(distances(tmp.ig, v=current_node, to=tmp.path[2]))
i = i+1
PATH[i] <- tmp.path[2]
}
PATH <- as.character()
PATH[1] <- Source
current_node=Source
t=0
i=1
print(paste0("at T=",t," --- at node=",current_node))
ttt <- sprintf("%03d", 10*ceiling(t/10))
tmp.ig <- G[[ttt]]
tmp.sp <- shortest_paths(tmp.ig, from = current_node, to = Dist)
tmp.path <- attributes(sp0$vpath[[1]])$names
current_node <- tmp.path[2]
t = t + as.numeric(distances(tmp.ig, v=current_node, to=tmp.path[2]))
t
as.numeric(distances(tmp.ig, v=current_node, to=tmp.path[2]))
PATH <- as.character()
PATH[1] <- Source
current_node=Source
t=0
i=1
while (current_node != Dist) {
print(paste0("at T=",t," --- at node=",current_node))
ttt <- sprintf("%03d", 10*ceiling(t/10))
tmp.ig <- G[[ttt]]
tmp.sp <- shortest_paths(tmp.ig, from = current_node, to = Dist)
tmp.path <- attributes(sp0$vpath[[1]])$names
t = t + as.numeric(distances(tmp.ig, v=current_node, to=tmp.path[2]))
i = i+1
PATH[i] <- tmp.path[2]
current_node <- tmp.path[2]
}
ttt
tmp.ig <- G[[ttt]]
tmp.sp <- shortest_paths(tmp.ig, from = current_node, to = Dist)
tmp.sp
tmp.path <- attributes(sp0$vpath[[1]])$names
tmp.path
tmp.path <- attributes(tmp.sp$vpath[[1]])$names
tmp.path
as.numeric(distances(tmp.ig, v=current_node, to=tmp.path[2]))
PATH <- as.character()
PATH[1] <- Source
current_node=Source
t=0
i=1
while (current_node != Dist) {
print(paste0("at T=",t," --- at node=",current_node))
ttt <- sprintf("%03d", 10*ceiling(t/10))
tmp.ig <- G[[ttt]]
tmp.sp <- shortest_paths(tmp.ig, from = current_node, to = Dist)
tmp.path <- attributes(tmp.sp$vpath[[1]])$names
t = t + as.numeric(distances(tmp.ig, v=current_node, to=tmp.path[2]))
i = i+1
PATH[i] <- tmp.path[2]
current_node <- tmp.path[2]
}
print(paste0("CURRENT NODE = ",current_node))
PATH <- as.character()
PATH[1] <- Source
current_node=Source
t=0
i=1
while (current_node != Dist) {
print(paste0("at T=",t," --- at node=",current_node))
ttt <- sprintf("%03d", 10*ceiling(t/10))
tmp.ig <- G[[ttt]]
tmp.sp <- shortest_paths(tmp.ig, from = current_node, to = Dist)
tmp.path <- attributes(tmp.sp$vpath[[1]])$names
t = t + as.numeric(distances(tmp.ig, v=current_node, to=tmp.path[2]))
i = i+1
PATH[i] <- tmp.path[2]
current_node <- tmp.path[2]
}
print(paste0("at T=",t," --- at node=",current_node))
M <- list()
G <- list()
for (i in seq(0,30,10)){
ttt <- sprintf("%03d", i)
filename <- paste0(foldname,"Travel_Times_TestCase1/tt_",ttt)
tmp <- read.delim(filename, header = FALSE)
tmp <- as.matrix(tmp)
colnames(tmp) <- LETTERS[seq( from = 1, to = 8)]
rownames(tmp) <- LETTERS[seq( from = 1, to = 8)]
M[[ttt]] <- tmp
G[[ttt]] <- graph.adjacency(M[[ttt]], mode="undirected", weighted=TRUE)
}
Source="A"
Dist="G"
ig0 <- graph.adjacency(M[['000']], mode="undirected", weighted=TRUE)
v0 <- as_long_data_frame(ig0)
v0[1:2] <- v0[4:5]
v0 <- v0[1:3]
colnames(v0) <- c("from","to","cost")
plot(ig0, edge.label=round(E(ig0)$weight, 3), layout=layout.grid, vertex.label.color= "black")
distances(ig0)
AA <- all_simple_paths(ig0, from = Source, to = Dist)
sp0 <- shortest_paths(ig0, from = Source, to = Dist)
path0 <- attributes(sp0$vpath[[1]])$names
PATH <- as.character()
PATH[1] <- Source
current_node=Source
t=0
i=1
while (current_node != Dist) {
print(paste0("at T=",t," --- at node=",current_node))
ttt <- sprintf("%03d", 10*ceiling(t/10))
tmp.ig <- G[[ttt]]
tmp.sp <- shortest_paths(tmp.ig, from = current_node, to = Dist)
tmp.path <- attributes(tmp.sp$vpath[[1]])$names
t = t + as.numeric(distances(tmp.ig, v=current_node, to=tmp.path[2]))
i = i+1
PATH[i] <- tmp.path[2]
current_node <- tmp.path[2]
}
ttt
G[[ttt]]
M <- list()
G <- list()
for (i in seq(0,60,10)){
ttt <- sprintf("%03d", i)
filename <- paste0(foldname,"Travel_Times_TestCase1/tt_",ttt)
tmp <- read.delim(filename, header = FALSE)
tmp <- as.matrix(tmp)
colnames(tmp) <- LETTERS[seq( from = 1, to = 8)]
rownames(tmp) <- LETTERS[seq( from = 1, to = 8)]
M[[ttt]] <- tmp
G[[ttt]] <- graph.adjacency(M[[ttt]], mode="undirected", weighted=TRUE)
}
Source="A"
Dist="G"
ig0 <- graph.adjacency(M[['000']], mode="undirected", weighted=TRUE)
v0 <- as_long_data_frame(ig0)
v0[1:2] <- v0[4:5]
v0 <- v0[1:3]
colnames(v0) <- c("from","to","cost")
plot(ig0, edge.label=round(E(ig0)$weight, 3), layout=layout.grid, vertex.label.color= "black")
distances(ig0)
AA <- all_simple_paths(ig0, from = Source, to = Dist)
sp0 <- shortest_paths(ig0, from = Source, to = Dist)
path0 <- attributes(sp0$vpath[[1]])$names
PATH <- as.character()
PATH[1] <- Source
current_node=Source
t=0
i=1
while (current_node != Dist) {
print(paste0("at T=",t," --- at node=",current_node))
ttt <- sprintf("%03d", 10*ceiling(t/10))
tmp.ig <- G[[ttt]]
tmp.sp <- shortest_paths(tmp.ig, from = current_node, to = Dist)
tmp.path <- attributes(tmp.sp$vpath[[1]])$names
t = t + as.numeric(distances(tmp.ig, v=current_node, to=tmp.path[2]))
i = i+1
PATH[i] <- tmp.path[2]
current_node <- tmp.path[2]
}
print(paste0("at T=",t," --- at node=",current_node))
PATH
load("C:/Users/Amir/Desktop/usgs_nwm_comps_v2/usgs_nwm_comps_v2/num_0010_20031001_20150929_4382_01018000.rds")
readRDS("C:/Users/Amir/Desktop/usgs_nwm_comps_v2/usgs_nwm_comps_v2/num_0010_20031001_20150929_4382_01018000.rds")
a <- readRDS("C:/Users/Amir/Desktop/usgs_nwm_comps_v2/usgs_nwm_comps_v2/num_0010_20031001_20150929_4382_01018000.rds")
View(a)
readRDS("C:\Users\Amir\Google Drive\NCSU-laptop sharing\Research\UrbanFlood-OKN\NWM Uncertainty Quantification\nwm_uncertainty\DATA_Flows_1993_2017")
readRDS("C:/Users/Amir/Google Drive/NCSU-laptop sharing/Research/UrbanFlood-OKN/NWM Uncertainty Quantification/nwm_uncertainty/DATA_Flows_1993_2017")
readRDS("C:/Users/Amir/Google Drive/NCSU-laptop sharing/Research/UrbanFlood-OKN/NWM Uncertainty Quantification/nwm_uncertainty/DATA_Flows_1993_2017/a.rds")
aa <- readRDS("C:/Users/Amir/Google Drive/NCSU-laptop sharing/Research/UrbanFlood-OKN/NWM Uncertainty Quantification/nwm_uncertainty/DATA_Flows_1993_2017/a.rds")
View(aa)
typeof(a)
typeof(aa)
class(aa)
class(a)
load("C:/Users/Amir/Desktop/DATA_Flows_1993_2017_RDS/DATA_Flows_1993_2017_RDS/STA_14362250.rds")
b <- readRDS("C:/Users/Amir/Desktop/DATA_Flows_1993_2017_RDS/DATA_Flows_1993_2017_RDS/STA_14362250.rds")
View(b)
plot(b$Qobs_cms,b$Qnwm_cms)
plot(log(b$Qobs_cms),log(b$Qnwm_cms))
load("C:/Users/Amir/Desktop/usgs_nwm_comps_v2/usgs_nwm_comps_v2/num_0004_19930101_20181231_9496_01011000.rds")
z <- readRDS("C:/Users/Amir/Desktop/usgs_nwm_comps_v2/usgs_nwm_comps_v2/num_0004_19930101_20181231_9496_01011000.rds")
x <- readRDS("C:/Users/Amir/Desktop/usgs_nwm_comps_v2/usgs_nwm_comps_v2/num_0044_19930101_20181231_9496_01047000.rds")
head(z)
head(x)
shiny::runApp('C:/Users/Amir/Google Drive/NCSU-laptop sharing/Research/UrbanFlood-OKN/NWM Uncertainty Quantification/NWM_Assessment_ShinyApp')
library(shiny)
library(leaflet)
library(lattice)
library(dplyr)
library(raster)
library(rgdal)
library(RColorBrewer)
library(moments)
runApp('C:/Users/Amir/Google Drive/NCSU-laptop sharing/Research/UrbanFlood-OKN/NWM Uncertainty Quantification/NWM_Assessment_ShinyApp')
runApp('C:/Users/Amir/Google Drive/NCSU-laptop sharing/Research/UrbanFlood-OKN/NWM Uncertainty Quantification/NWM_Assessment_ShinyApp')
shiny::runApp('C:/Users/Amir/Google Drive/NCSU-laptop sharing/Research/UrbanFlood-OKN/NWM Uncertainty Quantification/NWM_Assessment_ShinyApp')
runApp('C:/Users/Amir/Google Drive/NCSU-laptop sharing/Research/UrbanFlood-OKN/NWM Uncertainty Quantification/NWM_Assessment_ShinyApp')
runApp('C:/Users/Amir/Google Drive/NCSU-laptop sharing/Research/UrbanFlood-OKN/NWM Uncertainty Quantification/NWM_Assessment_ShinyApp')
runApp('C:/Users/Amir/Google Drive/NCSU-laptop sharing/Research/UrbanFlood-OKN/NWM Uncertainty Quantification/NWM_Assessment_ShinyApp')
runApp('C:/Users/Amir/Google Drive/NCSU-laptop sharing/Research/UrbanFlood-OKN/NWM Uncertainty Quantification/NWM_Assessment_ShinyApp')
checkboxInput(?)
?checkboxInput()
?colorQuantile()
runApp('C:/Users/Amir/Google Drive/NCSU-laptop sharing/Research/UrbanFlood-OKN/NWM Uncertainty Quantification/NWM_Assessment_ShinyApp')
runApp('C:/Users/Amir/Google Drive/NCSU-laptop sharing/Research/UrbanFlood-OKN/NWM Uncertainty Quantification/NWM_Assessment_ShinyApp')
?checkboxInput
runApp('C:/Users/Amir/Google Drive/NCSU-laptop sharing/Research/UrbanFlood-OKN/NWM Uncertainty Quantification/NWM_Assessment_ShinyApp')
runApp('C:/Users/Amir/Google Drive/NCSU-laptop sharing/Research/UrbanFlood-OKN/NWM Uncertainty Quantification/NWM_Assessment_ShinyApp')
runApp('C:/Users/Amir/Google Drive/NCSU-laptop sharing/Research/UrbanFlood-OKN/NWM Uncertainty Quantification/NWM_Assessment_ShinyApp')
as.logical()
runApp('C:/Users/Amir/Google Drive/NCSU-laptop sharing/Research/UrbanFlood-OKN/NWM Uncertainty Quantification/NWM_Assessment_ShinyApp')
?saveRDS
load("C:/Users/Amir/Google Drive/NCSU-laptop sharing/Research/UrbanFlood-OKN/NWM Uncertainty Quantification/nwm_uncertainty/Results_Assessment_NWM/STA_01010000.rds")
a <- readRDS("C:/Users/Amir/Google Drive/NCSU-laptop sharing/Research/UrbanFlood-OKN/NWM Uncertainty Quantification/nwm_uncertainty/Results_Assessment_NWM/STA_01010000.rds")
a$Dec
View(a)
View(a$winter)
boxplot(a$winter$NSE_C)
a <- readRDS("C:/Users/Amir/Google Drive/NCSU-laptop sharing/Research/UrbanFlood-OKN/NWM Uncertainty Quantification/nwm_uncertainty/Results_Assessment_NWM/STA_01034000.rds")
b <- readRDS("C:/Users/Amir/Google Drive/NCSU-laptop sharing/Research/UrbanFlood-OKN/NWM Uncertainty Quantification/nwm_uncertainty/Results_Assessment_NWM/STA_01010000.rds")
boxplot(a$winter$NSE_C)
boxplot(b$winter$NSE_C)
boxplot(a$winter$NSE_C)
boxplot(a$winter$NSE_C, a$spring$NSE_C)
boxplot(a$winter$NSE_C, a$spring$NSE_C, a$summer$NSE_C, a$fall$NSE_C)
boxplot(b$winter$NSE_C, b$spring$NSE_C, b$summer$NSE_C, b$fall$NSE_C)
boxplot(a$winter$NSE_C, a$spring$NSE_C, a$summer$NSE_C, a$fall$NSE_C)
median(b$winter$miu_obs)
median(a$winter$miu_obs)
median(a$winter$NSE_C)
library(raster)
load("C:/Users/Amir/Desktop/shp_basins/basins.shp")
a <- shapefile("C:/Users/Amir/Desktop/shp_basins/basins.shp")
View(a)
shiny::runApp('C:/Users/Amir/Google Drive/NCSU-laptop sharing/Research/UrbanFlood-OKN/NWM Uncertainty Quantification/Regional_Assessment_NWM')
runApp('C:/Users/Amir/Google Drive/NCSU-laptop sharing/Research/UrbanFlood-OKN/NWM Uncertainty Quantification/Regional_Assessment_NWM')
library(shiny)
library(leaflet)
library(RColorBrewer)
library(plotly)
runApp('C:/Users/Amir/Google Drive/NCSU-laptop sharing/Research/UrbanFlood-OKN/NWM Uncertainty Quantification/Regional_Assessment_NWM')
library(shiny)
library(RColorBrewer)
library(leaflet)
library(lattice)
library(dplyr)
library(raster)
library(rgdal)
library(moments)
library(plotly)
library(reshape2)
library(dygraphs)
library(xts)
runApp('C:/Users/Amir/Google Drive/NCSU-laptop sharing/Research/UrbanFlood-OKN/NWM Uncertainty Quantification/Regional_Assessment_NWM')
library(shiny)
library(RColorBrewer)
library(leaflet)
library(lattice)
library(dplyr)
library(raster)
library(rgdal)
library(moments)
library(plotly)
library(reshape2)
library(dygraphs)
?dygraph
dygraph
load("C:/Users/Amir/Google Drive/NCSU-laptop sharing/Research/UrbanFlood-OKN/NWM Uncertainty Quantification/Regional_Assessment_NWM/Flows_1993_2018_V2/STA_01010000.rds")
flows <- readRDS("C:/Users/Amir/Google Drive/NCSU-laptop sharing/Research/UrbanFlood-OKN/NWM Uncertainty Quantification/Regional_Assessment_NWM/Flows_1993_2018_V2/STA_01010000.rds")
flows$Qnwm[flows$Qnwm<0] <- 0
dygraph(flows[,c("Date","Qobs")])
flows[,c("Date","Qobs")]
require(devtools)
install_version("xts", version = "0.9-7", repos = "http://cran.us.r-project.org")
install.packages("devtools")
require(devtools)
install_version("xts", version = "0.9-7", repos = "http://cran.us.r-project.org")
require(devtools)
install_version("xts", version = "0.9-7", repos = "http://cran.us.r-project.org")
?version
shiny::runApp('C:/Users/Amir/Google Drive/NCSU-laptop sharing/Research/UrbanFlood-OKN/NWM Uncertainty Quantification/Regional_Assessment_NWM')
runApp()
runApp('C:/Users/Amir/Google Drive/NCSU-laptop sharing/Research/UrbanFlood-OKN/NWM Uncertainty Quantification/Regional_Assessment_NWM')
runApp('C:/Users/Amir/Google Drive/NCSU-laptop sharing/Research/UrbanFlood-OKN/NWM Uncertainty Quantification/Regional_Assessment_NWM')
?dygraph
mdeaths
class(mdeaths)
lungDeaths <- cbind(mdeaths, fdeaths)
View(lungDeaths)
?as.ts
runApp('C:/Users/Amir/Google Drive/NCSU-laptop sharing/Research/UrbanFlood-OKN/NWM Uncertainty Quantification/Regional_Assessment_NWM')
install.packages("tsbox")
runApp('C:/Users/Amir/Google Drive/NCSU-laptop sharing/Research/UrbanFlood-OKN/NWM Uncertainty Quantification/Regional_Assessment_NWM')
?xts::as.xts()
shiny::runApp('C:/Users/Amir/Google Drive/NCSU-laptop sharing/Research/UrbanFlood-OKN/NWM Uncertainty Quantification/Regional_Assessment_NWM')
runApp('C:/Users/Amir/Google Drive/NCSU-laptop sharing/Research/UrbanFlood-OKN/NWM Uncertainty Quantification/Regional_Assessment_NWM')
?xts::as.xts()
?xts::xts()
runApp('C:/Users/Amir/Google Drive/NCSU-laptop sharing/Research/UrbanFlood-OKN/NWM Uncertainty Quantification/Regional_Assessment_NWM')
load("C:/Users/Amir/Google Drive/NCSU-laptop sharing/Research/UrbanFlood-OKN/NWM Uncertainty Quantification/Regional_Assessment_NWM/Flows_1993_2018_V2/STA_01010000.rds")
flows <- readRDS("C:/Users/Amir/Google Drive/NCSU-laptop sharing/Research/UrbanFlood-OKN/NWM Uncertainty Quantification/Regional_Assessment_NWM/Flows_1993_2018_V2/STA_01010000.rds")
flows[flows$Qnwm<0 , "Qnwm"] <- 0
flows_ts <- xts::xts(x=flows[,c("Qobs","Qnwm")], order.by = flows$Date)
dygraph(flows_ts, main = "Streamflow predictions and observations") %>%
dySeries(c("lwr", "fit", "upr")) %>%
dyOptions(drawGrid = input$showgrid)
dygraph(flows_ts, main = "Streamflow predictions and observations") %>%
dySeries(c("Qnwm", "Qobs")) %>%
dyOptions(drawGrid = input$showgrid)
dygraph(flows_ts)
runApp('C:/Users/Amir/Google Drive/NCSU-laptop sharing/Research/UrbanFlood-OKN/NWM Uncertainty Quantification/Regional_Assessment_NWM')
dygraph(flows_ts, main = "NWM predictions vs. USGS observations") %>%
dyRangeSelector()
list.metrics_out <- c("miu_obs" = "QObs-Mean",
"sigma_obs" = "Qobs-Standard Deviation",
"miu_est" = "QNWM-Mean",
"sigma_est" = "QNWM-Standard Deviation",
"MSE"="MSE", "KGE"="KGE", "NSE"="NSE",
"NSE_A"="NSE_A", "NSE_B"="NSE_B", "NSE_C"="NSE_C")
list.metrics_out
colnames(list.metrics_out) <- list.metrics_out
names(list.metrics_out) <- list.metrics_out
list.metrics_out
runApp('C:/Users/Amir/Google Drive/NCSU-laptop sharing/Research/UrbanFlood-OKN/NWM Uncertainty Quantification/Regional_Assessment_NWM')
runApp('C:/Users/Amir/Google Drive/NCSU-laptop sharing/Research/UrbanFlood-OKN/NWM Uncertainty Quantification/Regional_Assessment_NWM')
library(shiny)
library(RColorBrewer)
library(leaflet)
library(lattice)
library(dplyr)
library(raster)
library(rgdal)
library(moments)
library(plotly)
library(reshape2)
library(dygraphs)
runApp('C:/Users/Amir/Google Drive/NCSU-laptop sharing/Research/UrbanFlood-OKN/NWM Uncertainty Quantification/Regional_Assessment_NWM')
?summary.table
setwd("C:/Users/Amir/Google Drive/NCSU-laptop sharing/Research/UrbanFlood-OKN/NWM Uncertainty Quantification/Regional_Assessment_NWM")
metrics.overall <- read.table("./AppDATA/Verification_Metrics_overall_v2", sep=",", header = TRUE,
colClasses = c("siteID"="character"))
colnames(metrics.overall)[-1] <- paste0(colnames(metrics.overall)[-1],"_overall")
metrics.seasonal <- read.table("./AppDATA/Verification_Metrics_seasonal_v2", sep=",", header = TRUE,
colClasses = c("siteID"="character"))
metrics.monthly <- read.table("./AppDATA/Verification_Metrics_monthly_v2", sep=",", header = TRUE,
colClasses = c("siteID"="character"))
metrics.all <- cbind(metrics.overall, metrics.seasonal[,-1], metrics.monthly[,-1])
is.na(metrics.all) <- sapply(metrics.all, is.infinite)
basin_layer <- shapefile(paste0("AppDATA/stations_info.shp"))
basin_boundary_layer <- shapefile(paste0("AppDATA/basins.shp"))
basin_layer.info <- read.table("AppDATA/info_stations.txt", sep=",", header=TRUE,
colClasses = c("siteID"="character"))
list.metrics_out <- c("miu_obs" = "QObs-Mean",
"sigma_obs" = "Qobs-Standard Deviation",
"miu_est" = "QNWM-Mean",
"sigma_est" = "QNWM-Standard Deviation",
"MSE"="MSE", "KGE"="KGE", "NSE"="NSE",
"NSE_A"="NSE_A", "NSE_B"="NSE_B", "NSE_C"="NSE_C")
list.units <- c("miu_obs" = "[m^3/s]", "sigma_obs" = "[m^3/s]", "miu_est" = "[m^3/s]", "sigma_est" = "[m^3/s]",
"MSE"="", "KGE"="", "NSE"="", "NSE_A"="", "NSE_B"="", "NSE_C"="")
list.assessment_subnames <- list("Annual" = "overall",
"Seasonal" = c("winter","spring","summer","fall"),
"Monthly" = month.abb)
tmp.dataly <- cbind(data.frame("x"=log(basin_layer.info$DA), "y"=metrics.all$NSE_A_overall), basin_layer.info)
#tmp.dataly <- cbind(data.frame("x"=log(basin_layer.info$DA), "y"=metrics.all$NSE_A_overall), basin_layer.info)
tmp.dataly <- tmp.dataly[rowSums(is.na(tmp.dataly[,unlist(lapply(tmp.dataly, is.numeric))])) == 0,]
rownames(tmp.dataly) <- NULL
tmp.lm.expr <- "y ~ x"
for (tmp.class in unique(tmp.dataly$CLASS)){
tmp.lm.data <- tmp.dataly[tmp.dataly$CLASS == tmp.class,]
tmp.lm <- lm(tmp.lm.expr, tmp.lm.data)
tmp.dataly[rownames(tmp.lm.data),"fitted_y"] <- tmp.lm$fitted.values
#print(paste(tmp.class,summary(tmp.lm), collapse = " "))
output$lm_summary <- renderPrint({ summary(tmp.lm) })
}
for (tmp.class in unique(tmp.dataly$CLASS)){
tmp.lm.data <- tmp.dataly[tmp.dataly$CLASS == tmp.class,]
tmp.lm <- lm(tmp.lm.expr, tmp.lm.data)
tmp.dataly[rownames(tmp.lm.data),"fitted_y"] <- tmp.lm$fitted.values
#print(paste(tmp.class,summary(tmp.lm), collapse = " "))
#output$lm_summary <- renderPrint({ summary(tmp.lm) })
}
#print(paste(tmp.class,summary(tmp.lm), collapse = " "))
#output$lm_summary <- renderPrint({ summary(tmp.lm) })
summary(tmp.lm)
summary(tmp.lm)
summary(tmp.lm)
#print(paste(tmp.class,summary(tmp.lm), collapse = " "))
#output$lm_summary <- renderPrint({ summary(tmp.lm) })
tmp.summary <- summary(tmp.lm)
tmp.summary$call
tmp.summary$call <- tmp.lm.expr
tmp.summary
tmp.summary$call <- paste(tmp.class,"flows --> " , tmp.lm.expr)
tmp.summary
?grep
sub("x","hhh",tmp.lm.expr)
sub("x",X_label,tmp.lm.expr)
tmp.lm.data
length(tmp.lm.data)
dim(tmp.lm.data)
runApp()
tmp.summary
names(tmp.summary)
tmp.summary$terms
runApp()
tmp.class
tmp.lm.data <- tmp.dataly[tmp.dataly$CLASS == tmp.class,]
tmp.lm <- lm(tmp.lm.expr, tmp.lm.data)
tmp.dataly[rownames(tmp.lm.data),"fitted_y"] <- tmp.lm$fitted.values
#print(paste(tmp.class,summary(tmp.lm), collapse = " "))
#output$lm_summary <- renderPrint({ summary(tmp.lm) })
tmp.summary <- summary(tmp.lm)
tmp.lm.expr2 <- sub("x",X_label,tmp.lm.expr)
tmp.lm.expr2 <- sub("y",Y_label,tmp.lm.expr2)
tmp.summary$call <- paste(tmp.class,"flows (n=",dim(tmp.lm.data)[1],"): " , tmp.lm.expr2)
all_summaries[[tmp.class]] <- tmp.summary
tmp.lm.data <- tmp.dataly[tmp.dataly$CLASS == tmp.class,]
tmp.lm <- lm(tmp.lm.expr, tmp.lm.data)
tmp.dataly[rownames(tmp.lm.data),"fitted_y"] <- tmp.lm$fitted.values
#print(paste(tmp.class,summary(tmp.lm), collapse = " "))
#output$lm_summary <- renderPrint({ summary(tmp.lm) })
tmp.summary <- summary(tmp.lm)
tmp.lm.expr2 <- tmp.lm.expr
tmp.lm.expr2 <- sub("x",X_label,tmp.lm.expr2)
tmp.lm.expr2 <- sub("y",Y_label,tmp.lm.expr2)
tmp.summary$call <- paste(tmp.class,"flows (n=",dim(tmp.lm.data)[1],"): " , tmp.lm.expr2)
all_summaries[[tmp.class]] <- tmp.summary
all_summaries <- list()
all_summaries[[tmp.class]] <- tmp.summary
tmp.class
tmp.class <- "non-natural"
all_summaries[[tmp.class]] <- tmp.summary
all_summaries
runApp()
install.packages("Hmisc")
library(Hmisc)
capitalize(names(all_summaries))
?toupper
toupper(names(all_summaries))
runApp()
tmp.summary$coefficients
rownames(tmp.summary$coefficients)
sub("x","hhh",rownames(tmp.summary$coefficients))
runApp()
runApp()
